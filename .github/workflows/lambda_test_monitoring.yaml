name: Lambda Invocation Test Async
on:
  workflow_dispatch:  # Manual trigger
    inputs:
      function_name:
        description: 'Lambda function name to test'
        required: false
        default: 'mursst-icechunk-updater-staging'
  push:  # Remove this after testing
    branches: lambda-invoke-test
        
env:
  AWS_REGION: us-west-2
  LAMBDA_FUNCTION_NAME: ${{ github.event.inputs.function_name || 'mursst-icechunk-updater-staging'}}
  LOG_GROUP_NAME: /aws/lambda/${{ github.event.inputs.function_name || 'mursst-icechunk-updater-staging'}}
  AWS_ROLE_ARN: arn:aws:iam::444055461661:role/github-actions-role-eodc

jobs:
  test-lambda:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify Lambda function exists
      run: |
        echo "üîç Checking if Lambda function exists..."
        aws lambda get-function \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --region ${{ env.AWS_REGION }}
        echo "‚úÖ Lambda function found"

    - name: Run Lambda asynchronously and tail logs
      run: |
        echo "üöÄ Invoking Lambda function asynchronously: ${{ env.LAMBDA_FUNCTION_NAME }}"
        
        # Record start time for log filtering
        START_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
        echo "Start time: $START_TIME"
        
        # Invoke Lambda asynchronously
        if aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload '{}' \
          --region ${{ env.AWS_REGION }} \
          --invocation-type Event \
          --cli-connect-timeout 60 \
          response1.json; then
          
          echo "‚úÖ Lambda invocation request sent successfully"
          echo "Response:"
          cat response1.json
          
          echo ""
          echo "üìã Tailing logs for 10 minutes..."
          echo "Log Group: ${{ env.LOG_GROUP_NAME }}"
          
          # Tail logs with timeout using background process and timeout command
          timeout 600s aws logs tail "${{ env.LOG_GROUP_NAME }}" \
            --follow \
            --region ${{ env.AWS_REGION }} \
            --since "$START_TIME" || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo ""
              echo "‚è∞ Log tailing stopped after 10 minutes timeout"
            else
              echo ""
              echo "‚ùå Log tailing failed with exit code: $exit_code"
              exit 1
            fi
          }
          
          echo ""
          echo "‚úÖ Log tailing completed"
          
        else
          echo "‚ùå Lambda invocation request failed"
          exit 1
        fi
