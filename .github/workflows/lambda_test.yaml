name: Lambda Invokation Test

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      function_name:
        description: 'Lambda function name to test'
        required: false
        default: 'mursst-icechunk-updater-staging'
  push:  # Remove this after testing
    branches: lambda-invoke-test
        
env:
  AWS_REGION: us-west-2
  LAMBDA_FUNCTION_NAME: ${{ github.event.inputs.function_name || 'mursst-icechunk-updater-staging'}}
  LOG_GROUP_NAME: /aws/lambda/${{ github.event.inputs.function_name || 'mursst-icechunk-updater-staging'}}
  AWS_ROLE_ARN: arn:aws:iam::444055461661:role/github-actions-role-eodc

jobs:
  test-lambda:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify Lambda function exists
      run: |
        echo "üîç Checking if Lambda function exists..."
        aws lambda get-function \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --region ${{ env.AWS_REGION }}
        echo "‚úÖ Lambda function found"

    - name: Run Lambda tests with debugging
      run: |
        echo "Testing Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        
        # Invoke Lambda
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload '{}' \
          --region ${{ env.AWS_REGION }} \
          --cli-read-timeout 900 \
          --cli-connect-timeout 60 \
          response1.json; then
          
        echo "‚úÖ Lambda invocation successful"
        echo "Response:"
        cat response1.json

    - name: Extract Lambda logs after successful invocation
      if: success()
      run: |
        echo "üì• Extracting Lambda execution logs..."
        
        # Wait a moment for logs to be available
        sleep 10
        
        # Get the most recent log stream
        LATEST_STREAM=$(aws logs describe-log-streams \
          --log-group-name "${{ env.LOG_GROUP_NAME }}" \
          --order-by LastEventTime \
          --descending \
          --max-items 1 \
          --region ${{ env.AWS_REGION }} \
          --query 'logStreams[0].logStreamName' \
          --output text)
        
        echo "Latest log stream: $LATEST_STREAM"
        
        # Extract the logs
        aws logs get-log-events \
          --log-group-name "${{ env.LOG_GROUP_NAME }}" \
          --log-stream-name "$LATEST_STREAM" \
          --region ${{ env.AWS_REGION }} \
          --query 'events[*].message' \
          --output text > lambda_execution.log
        
        echo "üìã Lambda execution logs:"
        cat lambda_execution.log
    
    - name: Upload Lambda logs as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lambda-logs
        path: lambda_execution.log
        
  monitor-lambda:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run Lambda asynchronously and tail logs
      run: |
          # Tail logs with timeout using background process and timeout command
          timeout 600s aws logs tail "${{ env.LOG_GROUP_NAME }}" \
            --follow \
            --region ${{ env.AWS_REGION }} \
            --since "$START_TIME" || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo ""
              echo "‚è∞ Log tailing stopped after 10 minutes timeout"
            else
              echo ""
              echo "‚ùå Log tailing failed with exit code: $exit_code"
              exit 1
            fi
          }
          
          echo ""
          echo "‚úÖ Log tailing completed"
