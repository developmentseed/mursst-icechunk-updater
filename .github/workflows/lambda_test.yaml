# .github/workflows/lambda-test.yml
name: Lambda Invokation Test

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      function_name:
        description: 'Lambda function name to test'
        required: false
        default: 'mursst-updater-staging'
  push:  # Remove this after testing
    branches: lambda-invoke-test
        
env:
  AWS_REGION: us-west-2
  LAMBDA_FUNCTION_NAME: ${{ github.event.inputs.function_name || 'MursstIcechunkUpdater'}}
  LOG_GROUP_NAME: /aws/lambda/${{ github.event.inputs.function_name}}
  AWS_ROLE_ARN: arn:aws:iam::444055461661:role/github-actions-role-eodc

jobs:
  test-lambda:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify Lambda function exists
      run: |
        echo "🔍 Checking if Lambda function exists..."
        aws lambda get-function \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --region ${{ env.AWS_REGION }}
        echo "✅ Lambda function found"

    - name: Get latest log stream
      id: log-stream
      run: |
        LATEST_STREAM=$(aws logs describe-log-streams \
          --log-group-name ${{ env.LOG_GROUP_NAME }} \
          --order-by LastEventTime \
          --descending \
          --limit 1 \
          --query 'logStreams[0].logStreamName' \
          --output text)
        echo "stream-name=$LATEST_STREAM" >> $GITHUB_OUTPUT

    - name: Start log monitoring in background
      run: |
        # Create a script to follow logs
        cat > follow-logs.sh << 'EOF'
        #!/bin/bash
        LOG_GROUP="${{ env.LOG_GROUP_NAME }}"
        STREAM_NAME="${{ steps.log-stream.outputs.stream-name }}"
        
        echo "🔍 Following logs for stream: $STREAM_NAME"
        
        # Get current timestamp
        START_TIME=$(date -d '1 minute ago' +%s)000
        
        while true; do
          aws logs get-log-events \
            --log-group-name "$LOG_GROUP" \
            --log-stream-name "$STREAM_NAME" \
            --start-time $START_TIME \
            --query 'events[*].[timestamp,message]' \
            --output text | while read timestamp message; do
              if [ ! -z "$timestamp" ]; then
                formatted_time=$(date -d "@$((timestamp/1000))" '+%Y-%m-%d %H:%M:%S')
                echo "[$formatted_time] $message"
              fi
            done
          sleep 2
        done
        EOF
        
        chmod +x follow-logs.sh
        ./follow-logs.sh > lambda-logs.txt 2>&1 &
        echo $! > log-follower.pid

    - name: Wait for log monitoring to start
      run: sleep 5

    - name: Run Lambda tests
      id: lambda-tests
      run: |
        echo "🧪 Running Lambda tests..."
        
        # Test 1: Basic invocation
        echo "=== Test 1: Basic Lambda invocation ==="
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload '{"test": "basic invocation", "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' \
          --region ${{ env.AWS_REGION }} \
          response1.json
        
        echo "Response:"
        cat response1.json
        echo -e "\n"
        
        echo -e "\n✅ All Lambda tests completed"

    - name: Wait for logs to be captured
      run: |
        echo "⏳ Waiting for logs to be captured..."
        sleep 10

    - name: Collect and display recent logs
      run: |
        echo "📋 Collecting recent Lambda logs..."
        
        # Get logs from the last 10 minutes
        END_TIME=$(date +%s)000
        START_TIME=$(date -d '10 minutes ago' +%s)000
        
        echo "Time range: $(date -d '10 minutes ago') to $(date)"
        echo "=============================================="
        
        # Get all recent log events
        aws logs filter-log-events \
          --log-group-name ${{ env.LOG_GROUP_NAME }} \
          --start-time $START_TIME \
          --end-time $END_TIME \
          --query 'events[*].[timestamp,message]' \
          --output text | while read timestamp message; do
            if [ ! -z "$timestamp" ] && [ "$timestamp" != "None" ]; then
              formatted_time=$(date -d "@$((timestamp/1000))" '+%Y-%m-%d %H:%M:%S UTC' 2>/dev/null || echo "Invalid timestamp")
              echo "[$formatted_time] $message"
            fi
          done > recent-logs.txt
        
        if [ -s recent-logs.txt ]; then
          echo "🔍 Recent Lambda logs:"
          cat recent-logs.txt
        else
          echo "⚠️ No recent logs found. The function may not have been invoked recently or logs may not be available yet."
          
          # Try to get the latest logs without time filter
          echo "Trying to get latest available logs..."
          aws logs filter-log-events \
            --log-group-name ${{ env.LOG_GROUP_NAME }} \
            --limit 50 \
            --query 'events[*].[timestamp,message]' \
            --output text | tail -20 | while read timestamp message; do
              if [ ! -z "$timestamp" ] && [ "$timestamp" != "None" ]; then
                formatted_time=$(date -d "@$((timestamp/1000))" '+%Y-%m-%d %H:%M:%S UTC' 2>/dev/null || echo "Invalid timestamp")
                echo "[$formatted_time] $message"
              fi
            done || echo "No logs available"
        fi

    - name: Analyze test results
      run: |
        echo "📊 Analyzing test results..."
        
        # Check if any responses contain errors
        ERROR_COUNT=0
        for file in response*.json; do
          if [ -f "$file" ]; then
            if grep -q "errorMessage\|ERROR\|Exception" "$file"; then
              echo "❌ Error found in $file:"
              cat "$file"
              ERROR_COUNT=$((ERROR_COUNT + 1))
            else
              echo "✅ $file - No errors detected"
            fi
          fi
        done
        
        # Check logs for errors
        if [ -f recent-logs.txt ]; then
          if grep -i "error\|exception\|failed" recent-logs.txt > /dev/null; then
            echo "⚠️ Errors found in logs:"
            grep -i "error\|exception\|failed" recent-logs.txt
          else
            echo "✅ No errors found in logs"
          fi
        fi
        
        # Summary
        if [ $ERROR_COUNT -gt 0 ]; then
          echo "❌ Test analysis completed with $ERROR_COUNT error(s)"
          exit 1
        else
          echo "✅ All tests passed successfully!"
        fi

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lambda-test-results-${{ github.run_number }}
        path: |
          response*.json
          recent-logs.txt
        retention-days: 30

    - name: Test summary
      if: always()
      run: |
        echo "📝 Test Summary"
        echo "==============="
        echo "Lambda Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "Region: ${{ env.AWS_REGION }}"
        echo "Test Run: ${{ github.run_number }}"
        echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo ""
        echo "Test files generated:"
        ls -la response*.json recent-logs.txt 2>/dev/null || echo "No test files found"
